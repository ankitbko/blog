<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://ankitbko.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ankitbko.github.io/blog/" rel="alternate" type="text/html" /><updated>2021-09-30T11:33:42-05:00</updated><id>https://ankitbko.github.io/blog/feed.xml</id><title type="html">F5 - Squashing Bugs</title><subtitle>A technology blog focusing on random stuff</subtitle><author><name>Ankit Sinha</name></author><entry><title type="html">STEADY by AID with ART</title><link href="https://ankitbko.github.io/blog/2021/07/steady-by-aid-with-art/" rel="alternate" type="text/html" title="STEADY by AID with ART" /><published>2021-07-30T00:00:00-05:00</published><updated>2021-07-30T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2021/07/steady-by-aid-with-art</id><author><name>&lt;a href='https://twitter.com/ankitbko', target='_blank'&gt;Ankit Sinha&lt;/a&gt;</name></author><category term="design" /><category term="software design" /><category term="principles" /><category term="architecture" /><summary type="html">This post is heavily inspired by Hints and Principles for Computer System Design by Butler Lampson and is derived from my notes when reading the paper. My goal of this article was to condense information in Butler’s paper into short actionable article that can be referenced when designing software. I strongly recommend reading the original paper.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ankitbko.github.io/blog/images/previews/steady-by-aid.jpg" /><media:content medium="image" url="https://ankitbko.github.io/blog/images/previews/steady-by-aid.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A better way to logging in Python</title><link href="https://ankitbko.github.io/blog/2021/04/logging-in-python/" rel="alternate" type="text/html" title="A better way to logging in Python" /><published>2021-04-15T00:00:00-05:00</published><updated>2021-04-15T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2021/04/logging-in-python</id><author><name>&lt;a href='https://twitter.com/ankitbko', target='_blank'&gt;Ankit Sinha&lt;/a&gt;</name></author><category term="python" /><category term="decorators" /><summary type="html">Any production application will likely have some guidelines regarding how and what needs to be logged in your application. More often these guidelines stem from common industry patterns such as “log all exceptions”. However implementing these guidelines are left to individual developers and leads to same set of logging statements repeated throughout the codebase. For instance to log all exceptions you would have a logging statement in every except block that captures exception and logs it under ERROR level. But the logging statement for same scenario may differ between developers due to their individual style of development. Overtime this leads to fragmented and inconsistent logging in the application. Moreover developers can make mistake and miss having logging statement at necessary places.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ankitbko.github.io/blog/images/previews/python-logging.jpg" /><media:content medium="image" url="https://ankitbko.github.io/blog/images/previews/python-logging.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Azure Devops Pull Request Extension for VS Code</title><link href="https://ankitbko.github.io/blog/2021/01/azdo-pr-vscode-extension/" rel="alternate" type="text/html" title="Azure Devops Pull Request Extension for VS Code" /><published>2021-01-16T00:00:00-06:00</published><updated>2021-01-16T00:00:00-06:00</updated><id>https://ankitbko.github.io/blog/2021/01/azdo-pr-vscode-extension</id><author><name>Ankit Sinha</name></author><category term="azdo" /><category term="azure devops" /><category term="pull request" /><category term="code review" /><category term="vscode" /><summary type="html">Marketplace: https://marketplace.visualstudio.com/items?itemName=ankitbko.vscode-pull-request-azdo.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ankitbko.github.io/blog/images/previews/azdo-pr-vscode-extension.jpg" /><media:content medium="image" url="https://ankitbko.github.io/blog/images/previews/azdo-pr-vscode-extension.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building large scale data ingestion solutions for Azure SQL using Azure databricks - Part 3</title><link href="https://ankitbko.github.io/blog/2020/09/bulk-import-using-sql-spark-connector-p3/" rel="alternate" type="text/html" title="Building large scale data ingestion solutions for Azure SQL using Azure databricks - Part 3" /><published>2020-09-08T00:00:00-05:00</published><updated>2020-09-08T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2020/09/bulk-import-using-sql-spark-connector-p3</id><author><name>&lt;a href='https://twitter.com/ankitbko', target='_blank'&gt;Ankit Sinha&lt;/a&gt;, &lt;a href='https://srikantan67.blogspot.com/' target='_blank'&gt;Srikantan Sankaran&lt;/a&gt;</name></author><category term="spark" /><category term="Azure Databricks" /><category term="Azure SQL" /><category term="data ingestion" /><category term="SQL spark connector" /><category term="big data" /><category term="python" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ankitbko.github.io/blog/images/previews/spark-connector-3-preview.png" /><media:content medium="image" url="https://ankitbko.github.io/blog/images/previews/spark-connector-3-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building large scale data ingestion solutions for Azure SQL using Azure databricks - Part 2</title><link href="https://ankitbko.github.io/blog/2020/09/bulk-import-using-sql-spark-connector-p2/" rel="alternate" type="text/html" title="Building large scale data ingestion solutions for Azure SQL using Azure databricks - Part 2" /><published>2020-09-03T00:00:00-05:00</published><updated>2020-09-03T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2020/09/bulk-import-using-sql-spark-connector-p2</id><author><name>&lt;a href='https://twitter.com/ankitbko', target='_blank'&gt;Ankit Sinha&lt;/a&gt;, &lt;a href='https://srikantan67.blogspot.com/' target='_blank'&gt;Srikantan Sankaran&lt;/a&gt;</name></author><category term="spark" /><category term="Azure Databricks" /><category term="Azure SQL" /><category term="data ingestion" /><category term="SQL spark connector" /><category term="big data" /><category term="python" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ankitbko.github.io/blog/images/previews/spark-connector-2-preview.png" /><media:content medium="image" url="https://ankitbko.github.io/blog/images/previews/spark-connector-2-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building large scale data ingestion solutions for Azure SQL using Azure databricks - Part 1</title><link href="https://ankitbko.github.io/blog/2020/09/bulk-import-using-sql-spark-connector-p1/" rel="alternate" type="text/html" title="Building large scale data ingestion solutions for Azure SQL using Azure databricks - Part 1" /><published>2020-09-01T00:00:00-05:00</published><updated>2020-09-01T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2020/09/bulk-import-using-sql-spark-connector-p1</id><author><name>Ankit Sinha</name></author><category term="spark" /><category term="Azure Databricks" /><category term="Azure SQL" /><category term="data ingestion" /><category term="SQL spark connector" /><category term="big data" /><category term="python" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ankitbko.github.io/blog/images/previews/spark-connector-1-preview.svg" /><media:content medium="image" url="https://ankitbko.github.io/blog/images/previews/spark-connector-1-preview.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Device Code Flow in Azure AD using Python’s requests module and MSAL</title><link href="https://ankitbko.github.io/blog/2020/08/device-code-flow-using-msal-in-python/" rel="alternate" type="text/html" title="Device Code Flow in Azure AD using Python’s requests module and MSAL" /><published>2020-08-17T00:00:00-05:00</published><updated>2020-08-17T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2020/08/device-code-flow-using-msal-in-python</id><author><name>Ankit Sinha</name></author><category term="Python" /><category term="azure" /><category term="oauth" /><category term="msal" /><category term="requests" /><category term="device code" /><summary type="html">Repo: https://github.com/ankitbko/python-requests-msal.</summary></entry><entry><title type="html">Modernizing a legacy application</title><link href="https://ankitbko.github.io/blog/2020/02/migrating-legacy-application-to-cloud/" rel="alternate" type="text/html" title="Modernizing a legacy application" /><published>2020-02-17T00:00:00-06:00</published><updated>2020-02-17T00:00:00-06:00</updated><id>https://ankitbko.github.io/blog/2020/02/migrating-legacy-application-to-cloud</id><author><name>Ankit Sinha</name></author><category term="asp.net core" /><category term="wcf" /><category term="legacy" /><category term="migration" /><category term="azure" /><summary type="html">This blog was co-authored by Srikantan Sankaran. You can follow him on twitter and on his blog.</summary></entry><entry><title type="html">Electron-Forge + React + TypeScript = Awesome!</title><link href="https://ankitbko.github.io/blog/2019/08/electron-forge-with-react-and-typescript/" rel="alternate" type="text/html" title="Electron-Forge + React + TypeScript = Awesome!" /><published>2019-08-26T00:00:00-05:00</published><updated>2019-08-26T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2019/08/electron-forge-with-react-and-typescript</id><author><name>Ankit Sinha</name></author><category term="React" /><category term="TypeScript" /><category term="Electron" /><category term="Javascript" /><category term="Electron Forge" /><category term="node" /><summary type="html">Recently I wanted start a new project on Electron and chose React to design UI. Having no prior experience in developing Electron App, I sat down to do some research. The Electron Documentation states two ways to start an electron project, Boilerplate or CLI, with a slight lean towards CLI.</summary></entry><entry><title type="html">Transferring chat to a human agent using Microsoft Bot Framework</title><link href="https://ankitbko.github.io/blog/2017/03/human-handover-bot/" rel="alternate" type="text/html" title="Transferring chat to a human agent using Microsoft Bot Framework" /><published>2017-03-28T00:00:00-05:00</published><updated>2017-03-28T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2017/03/human-handover-bot</id><author><name>Ankit Sinha</name></author><category term="Microsoft Bot Framework" /><category term="Bots" /><category term="Chat Bots" /><category term="Conversational Apps" /><category term="Agent" /><category term="Human" /><category term="Live Agent Transfer" /><summary type="html">Source Code: Human Handover Bot</summary></entry><entry><title type="html">Skype for Business bot using UCWA</title><link href="https://ankitbko.github.io/blog/2017/02/Sykpe-For-Business-Bot-Using-UCWA/" rel="alternate" type="text/html" title="Skype for Business bot using UCWA" /><published>2017-02-26T00:00:00-06:00</published><updated>2017-02-26T00:00:00-06:00</updated><id>https://ankitbko.github.io/blog/2017/02/Sykpe-For-Business-Bot-Using-UCWA</id><author><name>Ankit Sinha</name></author><category term="Microsoft Bot Framework" /><category term="LUIS" /><category term="Bots" /><category term="Chat Bots" /><category term="Conversational Apps" /><category term="Skype For Business" /><category term="UCWA" /><summary type="html">I had recently written a post on how to create a Skype for Business chatbot. In that I used Lync 2013 SDK to intercept messages and pass to bot. However I mentioned in my post that there is a better way to achieve the same by using Unified Communications Web API 2.0(UCWA). Since then I had received a lot of request to write a post on how to do the same. Though I had the code available with me(thanks to Om Shrivastava, my colleague), I did not post it because it was is a very bad shape(you will see). But since there was a lot of demand for it and after discussing with my readers(thank you Dan Williams and Hitesh), I finally got down to do some cleaning up. You can find the source code here. The source code is based on Tam Huynh UCWA Sample, a really well written sample which I then made a mess of.</summary></entry><entry><title type="html">Integrating CRIS with Microsoft Bot Framework</title><link href="https://ankitbko.github.io/blog/2017/02/cris-with-bot-framework/" rel="alternate" type="text/html" title="Integrating CRIS with Microsoft Bot Framework" /><published>2017-02-24T00:00:00-06:00</published><updated>2017-02-24T00:00:00-06:00</updated><id>https://ankitbko.github.io/blog/2017/02/cris-with-bot-framework</id><author><name>Ankit Sinha</name></author><category term="Microsoft Bot Framework" /><category term="LUIS" /><category term="Bots" /><category term="Chat Bots" /><category term="Conversational Apps" /><category term="Skype" /><category term="CRIS" /><summary type="html">Couple of months ago I wrote an article on how to skype call a bot. Behind the scene, the bot used Bing Speech API to perform Speech-To-Text(STT) conversion to get plaintext output of what user spoke. It was all cool but I was fairly disappointed with accuracy of Bing Speech. It failed miserably when using domain specific terminology and also did not perform so well with my accent(Indian). Also it did not fair nicely in a noisy environment.</summary></entry><entry><title type="html">BusyBot - Chat Bot for Skype for Business</title><link href="https://ankitbko.github.io/blog/2017/01/BusyBot-Sykpe-For-Business-Bot/" rel="alternate" type="text/html" title="BusyBot - Chat Bot for Skype for Business" /><published>2017-01-09T00:00:00-06:00</published><updated>2017-01-09T00:00:00-06:00</updated><id>https://ankitbko.github.io/blog/2017/01/BusyBot-Sykpe-For-Business-Bot</id><author><name>Ankit Sinha</name></author><category term="Microsoft Bot Framework" /><category term="LUIS" /><category term="Bots" /><category term="Chat Bots" /><category term="Conversational Apps" /><category term="Skype For Business" /><category term="Lync" /><summary type="html">We use Skype for Business in our organization which is a fairly common IM applications used in enterprises. The most common distraction while working is popping up of Skype message. And then it takes even more time to reply and finish the conversation, because not replying to colleagues is just rude. So I thought why not create a bot that replies to the messages for me. Unfortunately, Microsoft Bot Framework does not support Skype for Business as one of the channels so I had to find another way to make it works.</summary></entry><entry><title type="html">Skype Call your bot - Microsoft Bot Framework with Bing Speech</title><link href="https://ankitbko.github.io/blog/2016/11/skype-call-your-bot/" rel="alternate" type="text/html" title="Skype Call your bot - Microsoft Bot Framework with Bing Speech" /><published>2016-11-09T00:00:00-06:00</published><updated>2016-11-09T00:00:00-06:00</updated><id>https://ankitbko.github.io/blog/2016/11/skype-call-your-bot</id><author><name>Ankit Sinha</name></author><category term="Microsoft Bot Framework" /><category term="LUIS" /><category term="Bots" /><category term="Chat Bots" /><category term="Conversational Apps" /><category term="Skype" /><category term="Bing Speech" /><summary type="html">So over this past weekend, I was dead bored when I got this idea of calling a bot from Skype. Skype bot calling feature does exist(preview) but the samples which are available are only for simple IVR bot. So I thought why not integrate it with Bot Builder SDK, so that same bot can text and answer call at same time. So the basic idea is that the bot should follow the same flow irrespective whether the user texts or calls. Great idea to past time, after some initial trouble, I did manage to get it done(not neatly though). So why not write a blog about it. Source code is available over my github repo.</summary></entry><entry><title type="html">Microsoft Bot Framework - Use Redis to store conversation state</title><link href="https://ankitbko.github.io/blog/2016/10/Microsoft-Bot-Framework-Use-Redis-to-store-conversation-state/" rel="alternate" type="text/html" title="Microsoft Bot Framework - Use Redis to store conversation state" /><published>2016-10-17T00:00:00-05:00</published><updated>2016-10-17T00:00:00-05:00</updated><id>https://ankitbko.github.io/blog/2016/10/Microsoft-Bot-Framework-Use-Redis-to-store-conversation-state</id><author><name>Ankit Sinha</name></author><category term="Microsoft Bot Framework" /><category term="LUIS" /><category term="Bots" /><category term="Chat Bots" /><category term="Conversational Apps" /><category term="Redis" /><summary type="html">Bots created using Microsoft Bot Framework are by default stateless. The conversation state and it’s associated context is stored by Bot State Service in cloud. The state service stores information in 3 distinct bags keyed by their associated ids -</summary></entry></feed>